<?php
/**
 * @file
 * The Birthdays module allows users to add their birthday to their
 * profile. It lists birthdays on a seperate page and in different
 * blocks. Users can receive an e-mail on their birthday automatically,
 * and the administrator can receive daily reminders of who are having
 * their birthday. Requires Profile Module.
 */

/**
 * Admin e-mails disabled. Default.
 */
define('BIRTHDAYS_ADMIN_MAIL_DISABLED', '0');

/**
 * Admin e-mails should be sent dayly.
 */
define('BIRTHDAYS_ADMIN_MAIL_DAILY', '1');

/**
 * Admin e-mails should be sent weekly, on the first day of the week defined
 * by 'admin/settings/date-time'.
 */
define('BIRTHDAYS_ADMIN_MAIL_WEEKLY', '2');

/**
 * Admin e-mails should be sent monthly, on the first day of the month.
 */
define('BIRTHDAYS_ADMIN_MAIL_MONTHLY', '3');


/**
 * Do not show starsigns. Default.
 */
define('BIRTHDAYS_STARSIGN_OFF', '0');

/**
 * Show starsigns, with link to Yahoo.
 */
define('BIRTHDAYS_STARSIGN_LINK', '1');

/**
 * Show starsigns, image only.
 */
define('BIRTHDAYS_STARSIGN_NOLINK', '2');

/**
 * Do not hide the year of birth and age of users. This goes for all pages
 * generated by the Birthdays module. Default.
 */
define('BIRTHDAYS_HIDE_YEAR_NO', '0');

/**
 * Hide the year of birth and age of users. This goes for all pages
 * generated by the Birthdays module.
 */
define('BIRTHDAYS_HIDE_YEAR_YES', '1');

/**
 * Hiding or showing the year of birth and age is up to the user. This goes
 * for all pages generated by the Birthdays module.
 */
define('BIRTHDAYS_HIDE_YEAR_USER', '2');

/**
 * User does not want the birth year and age to be hidden. Used when
 * hiding the year is an user option.
 */
define('BIRTHDAYS_HIDE_YEAR_USER_NO', '0');

/**
 * User wants birth year and age to be hidden. Used when
 * hiding the year is an user option.
 */
define('BIRTHDAYS_HIDE_YEAR_USER_YES', '1');
/**
 * Do not show users without a birthday on the Birthdays listing
 * and sort by birthday. Default.
 */
define('BIRTHDAYS_PAGE_FILTER_SORT_DATE', '0');

/**
 * Do not show users without a birthday on the Birthdays listing
 * and sort by username.
 */
define('BIRTHDAYS_PAGE_FILTER_SORT_USER', '1');

/**
 * Show all users on the Birthdays listing and sort by username.
 */
define('BIRTHDAYS_PAGE_NOFILTER_SORT_USER', '2');

/**
 * Do not send an e-mail to the user on their birthday. Default.
 */
define('BIRTHDAYS_USER_MAIL_NO', '0');

/**
 * Send an e-mail to the user on their birthday.
 */
define('BIRTHDAYS_USER_MAIL_YES', '1');

/**
 * Sending an e-mail to the user depends on that user's preference.
 */
define('BIRTHDAYS_USER_MAIL_USER', '2');

/**
 * User doesn't want to be e-mailed on their birthday.
 */
define('BIRTHDAYS_USER_MAIL_USER_NO', '1');

/**
 * User wants to be e-mailed on their birthday.
 */
define('BIRTHDAYS_USER_MAIL_USER_YES', '0');

/**
 * Implementation of hook_help().
 */
function birthdays_help($path, $arg) {
  global $_birthdays_field;
  switch ($path) {
    case 'admin/help#birthdays':
      $output = '<p>' . t("The Birthdays module allows a user to put in their birthday and display it in their profile, on a separate Birthdays page and in a block. It also has the option to send out e-mails on users's birthdays, and to notify the administrator periodically about upcoming birthdays via e-mail.") . '</p>';
      $output .= '<p>' . t('Some basic information about this module can be found below. For more information, support questions, feature requests and bug reports please visit the <a href="@project_url">Birthdays project page</a> and the <a href="@documentation_url">online documentation</a>.', array('@project_url' => 'http://drupal.org/project/birthdays', '@documentation_url' => 'http://drupal.org/node/315658')) . '</p>';
      $output .= '<h2>' . t('Configuring the module') . '</h2>';
      $output .= '<p>' . t('Configuring the module is done on a number of pages.') . '</p>';
      $output .= '<h3>' . t('Birthdays administration pages') . '</h3>';
      $output .= '<p>' . t('The <a href="@birthdays_admin">Birthdays administration pages</a> are where the actual features of the birthdays module are set. Some of the options are described below.', array('@birthdays_admin' => url('admin/settings/birthdays'))) . '</p>';
      $output .= '<ul><li><strong>' . t('Profile field') . '</strong>: ' . t('here you set which "date" field of the Profile module you want the Birthdays module to use.') . '</li>';
      $output .= '<li><strong>' . t('Show star signs') . '</strong>: ' . t('select whether you want to display the star sign icons on the profile and on the Birthdays page, and, if so, whether it should link to Yahoo Horoscopes.') . '</li>';
      $output .= '<li><strong>' . t('Hide year and age') . '</strong>: ' . t("some sites might want to protect the user's privacy by hiding their age and year of birth. The options are 'No', 'Yes' and 'User optional, defaults to No', where the latter gives the user the option to  select whether he or she wants this information to be hidden. If enabled it still requires them to put the full date of birth in, but only the day and month will be displayed.") . '</li>';
      $output .= '<li><strong>' . t('Set Birthdays page settings') . '</strong>: ' . t('this influences how the listing of the Birthdays page is shown. Sorted by user name of date of birth (year not included) and users without a birthday shown or not.') . '</li>';
      $output .= '<li><strong>' . t('Show filter options') . '</strong>: ' . t("determine whether the buttons to filter by specific month and/or year should be displayed. When 'Hide year and age' is set to 'Yes', filtering by year is not possible.") . '</li>';
      $output .= '<li><strong>' . t('Send upcoming birthdays to admin') . '</strong>: ' . t("this one has 4 values 'Disabled', 'Dayly', 'Weekly, on the first day of the week' and 'Monthly'. This will send an e-mail to your site e-mail address at the given intervals, listing users that will have their birthday in that period. The first day of the week is controlled by the <a href=\"@date_settings\">date and time settings</a>.", array('@date_settings' => url('admin/settings/date-time'))) . '</li>';
      $output .= '<li><strong>' . t('Send user e-mail on day of birth') . '</strong>: ' . t("set whether users should receive an e-mail when they are having the birthday. Either 'No', 'Yes' or 'User optional, 'Yes' by default', where the latter leaves the decision up to the user.") . '</li></ul>';

      $output .= '<h3>' . t('Permissions') . '</h3>';
      $output .= '<p>' . t('To allow users to view birthdays of other people, the "access birthdays" <a href="@permissions_page">permissions</a> needs to be set for the appropriate role. This allows them to access the <a href="@birthdays_page">Birthdays page</a>, see activated blocks with birthdays and view the birthdays of users in the profiles.', array('@birthdays_page' => url('birthdays'), '@permissions_page' => url('admin/user/permissions', array('fragment' => 'module-birthdays')))) . '</p>';

      $output .= '<h3>' . t('Profile field settings') . '</h3>';

      $output .= '<p>' . t("Several things can be adjusted to the assigned profile field. To do so please visit the !profile_admin, and edit the field in question or add one if you haven't done so already. The following settings require extra attention.", array('!profile_admin' => l('Profile settings', 'admin/user/profile'))) . '</p>';

      $output .= '<ul><li><strong>' . t('The user must enter a value') . '</strong>: ' . t('force the user to fill in their date of  birth. A once set birthday can not be deleted.') . '</li>';
      $output .= '<li><strong>' . t('Visible in user registration form') . '</strong>: ' . t('give new users the option to add their date of birth when registering to your website. If combined with the option above, they can not register without putting their date of birth.') . '</li>';
      $output .= '<li><strong>' . t('Visibility') . '</strong>: ' . t("this will influence the visibility of the field as described there, but the behavior might become erratic if not set to 'Public field, content shown on profile page but not used on member list pages'. So it is recommended to leave this as is.") . '</li></ul>';
      $output .= '<p>' . t('The other options on this page behave as described on the settings page.') . '</p>';

      $output .= '<h3>' . t('Date format') . '</h3>';
      $output .= '<p>' . t('The way the birthdays are formatted (e.g. <em>11 may 1934</em> or <em>5/11/1934</em>) is controlled by the <a href="@date_settings_page">date and time settings</a>. The Birthdays module uses the short date format as basis for displaying days and months in the blocks and the medium date format is used in the profile and on the Birthdays page.', array('!date_settings_page' => url('admin/settings/date-time'))) . '</p>';

      $output .= '<h2>' . t('Synchronizing') . '</h2>';

      $output .= '<p>' . t('The birthdays are saved to two different database tables. This is because the profile module saves the dates in a format which limits the ability to perform calculations on the dates. These two tables need to be in sync with each other.') . '</p>';
      $output .= '<p>' . t('Normally this is the case, but sometimes not. For example when you already collected birthdays with the Profile module, but later decided to switch to the birthdays module. Or when you accidentally (on intentionally) completely uninstalled the profile module, but left birthdays module merely disabled. To perform the synchronization you can use the <a href="@sync_pages">synchronization form</a>.', array('@sync_page' => url('admin/settings/birthdays/sync'))) . '</p>';
      $output .= '<p>' . t('In the first case you need to copy the Profile data to the (most likely empty) Birthdays table, which is done with the top button. In the latter you need the copy the birthdays in the Birthdays table back to the Profile module with the bottom button.') . '</p>';
      $output .= '<p>' . t('Please note that with a large amount of users this might take some time.') . '</p>';

      return $output;
    case 'admin/settings/birthdays':
      return t('Use this page to alter the settings of the Birthdays module.');
  }
}

/**
 * Implements hook_field_info().
 */
function birthdays_field_info() {
  return array(
    'birthdays_date' => array(
      'label' => t('Birthday'),
      'description' => t('This field stores a birthday in the database.'),
      'default_widget' => 'birthdays_textfield',
      'default_formatter' => 'birthdays_plaintext',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function birthdays_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      try {
        BirthdaysBirthday::createFromDatabaseValue($item['value']);
      }
      catch (InvalidArgumentException $e) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'birthdays_invalid',
          'message' => t("You can enter both <em>dd.mm.yyyy</em> or <em>dd.mm.</em>."),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function birthdays_field_is_empty($item, $field) {
  if (!isset($item['value'])) {
    return TRUE;
  }

  try {
    return BirthdaysBirthday::createFromDatabaseValue($item['value'])->isEmpty();
  }
  catch (InvalidArgumentException $e) {
    return FALSE;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function birthdays_field_formatter_info() {
  return array(
    'birthdays_plaintext' => array(
      'label' => t('Plaintext'),
      'field types' => array('birthdays_date'),
    ),
  );
}

/**
 * Implements hook_field_formatter_field().
 */
function birthdays_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] = 'birthdays_plaintext') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array('#markup' => BirthdaysBirthday::createFromDatabaseValue($item['value'])->toString());
    }
  }

  return $element;
}

/**
 * Implements hoook_field_widget_info().
 */
function birthdays_field_widget_info() {
  return array(
    'birthdays_textfield' => array(
      'label' => t('Textfield'),
      'field types' => array('birthdays_date'),
    ),
  );
}

/**
 * Implement hook_field_widget().
 */
function birthdays_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta = 0) {
  $element = array(
    '#type' => 'textfield',
    '#element_validate' => array('_birthdays_textfield_validate'),
    '#langcode' => $langcode,
    '#size' => 10,
    '#title' => $instance['label'],
    '#description' => isset($instance['description']) ? $instance['description'] : '',
  );

  if (isset($items[$delta])) {
    $element['#default_value'] = BirthdaysBirthday::createFromDatabaseValue($items[$delta]['value'])->toString();
  }

  return $element;
}

/**
 * FAPI validation callback for the birthdays_field_widget_form element.
 */
function _birthdays_textfield_validate($element, &$form_state) {
  if ($element['#value']) {
    try {
      $birthday = BirthdaysBirthday::createFromText($element['#value']);
      form_set_value($element, array('value' => $birthday->toDatabaseValue()), $form_state);
    }
    catch (InvalidArgumentException $e) {
      form_set_value($element, array('value' => FALSE), $form_state);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function birthdays_field_widget_error($element, $error) {
  switch ($error['error']) {
    case 'birthdays_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function birthdays_theme() {
  return array(
    'birthdays_block' => array(
      'arguments' => array('uids' => array(), 'amount' => 0, 'block_type' => NULL),
      'template' => 'birthdays-block',
    ),
    'birthdays_page' => array(
      'arguments' => array('accounts' => array(), 'filter_month' => NULL, 'filter_year' => NULL),
      'file' => 'birthdays.page.inc',
      'template' => 'birthdays-page',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function birthdays_perm() {
  return array('access birthdays');
}


/**
 * Implementation of hook_cron().
 */
function birthdays_cron() {
  global $_birthdays_field;

  // Either user mail or admin mail is activated, and the birthdays profile field has been set.
  if (isset($_birthdays_field) && (variable_get('birthdays_send_user', BIRTHDAYS_USER_MAIL_NO) != BIRTHDAYS_USER_MAIL_NO || variable_get('birthdays_remind', BIRTHDAYS_ADMIN_MAIL_DISABLED) != BIRTHDAYS_ADMIN_MAIL_DISABLED)) {
    // Perform the check just once a day
    $time = time();
    if (variable_get('birthdays_last_cron', 0) <= ($time - 24*3600)) {
      // The message functions are now necessary, lets include them.
      module_load_include('inc', 'birthdays', 'birthdays.mail');
      // Reset time limit, round to nearest 100 seconds.
      variable_set('birthdays_last_cron', floor($time/100)*100);

      $remind_frequency = variable_get('birthdays_remind', BIRTHDAYS_ADMIN_MAIL_DISABLED);

      // Send user e-mails.
      _birthdays_send_user_message();

      // Send admin message if frequency is daily.
      if ($remind_frequency == BIRTHDAYS_ADMIN_MAIL_DAILY) {
        _birthdays_send_admin_message(1);
      }// Send admin message if frequency is weekly and today is the first day of the week.
      elseif ($remind_frequency == BIRTHDAYS_ADMIN_MAIL_WEEKLY && date('w', $time) == variable_get('date_first_day', 0)) {
        _birthdays_send_admin_message(7);
      }// Send admin message if frequency is monthly and today is the first day of the month.
      elseif ($remind_frequency == BIRTHDAYS_ADMIN_MAIL_MONTHLY && date('j', $time) == 1) {
        _birthdays_send_admin_message(date('t', $time));
      }
    }
  }
}


/**
 * Implementation of hook_block().
 */
function birthdays_block($op = 'list', $delta = 'by_days', $edit = array()) {
  global $_birthdays_field;
  if (isset($_birthdays_field)) {
    switch ($op) {
      // List the blocks on the blocks settings page
      case 'list':
        $blocks['by_days']['info'] = t('Birthdays Block: Next N days');
        $blocks['by_birthdays']['info'] = t('Birthdays Block: N upcoming birthdays');
        return $blocks;

      // Configure the blocks
      case 'configure':
        $form = array();
        switch ($delta) {
          case 'by_days':
            $form["birthdays_block_settings"] = array(
              '#type' => 'textfield',
              '#title' => t("Number of days to show"),
              '#default_value' => variable_get("birthdays_block_number_by_days", 7),
              '#size' => 2,
              '#maxlength' => 2,
              '#description' => t("Number of days looking forward for upcoming birthdays. Use 1 for today's birthdays only. Note: it might show more or less birthday items than the specified number of days, because not all days have birthdays, and some days have multiple birthdays."),
              '#required' => TRUE,
            );
            break;

          case 'by_birthdays':
            $form["birthdays_block_settings"] = array(
              '#type' => 'textfield',
              '#title' => t("Number of birthdays to show"),
              '#default_value' => variable_get("birthdays_block_number_by_birthdays", 6),
              '#size' => 2,
              '#maxlength' => 2,
              '#description' => t("Number of upcoming birthdays to list in the block. It will show exactly the specified number of birthdays, even if more people have their birthday on the same day. In that case, there will be people who will never be shown."),
              '#required' => TRUE,
            );
            break;

        }
        $form['birthdays_block_hide'] = array(
          '#type' => 'radios',
          '#title' => t('Hide block when no birthdays'),
          '#default_value' => variable_get("birthdays_block_hide_empty", 0),
          '#options' => array(t('No'), t('Yes')),
          '#description' => t("Should the block be hidden when there are no upcoming birthdays, or should it show a message."),
        );

        return $form;

      // Save the block's configuration
      case 'save':
        variable_set('birthdays_block_number_'. $delta, $edit['birthdays_block_settings']);
        variable_set('birthdays_block_hide_empty', $edit['birthdays_block_hide']);
        return;

      // View a block
      case 'view':
        $block = array();
        // Nothing to show when birthday_field_name is still empty
        // Don't show anything when the current user doesn't have the rights.
        if (user_access('access birthdays')) {
          switch ($delta) {
            case 'by_days':
              // Get desired amount of birthdays
              $amount = variable_get("birthdays_block_number_by_days", 7);
              $uids = birthdays_get_birthdays_by_days($amount);

              if (count($uids) > 0 || variable_get('birthdays_block_hide_empty', 0) == 0) {
                // Prepare block
                $block['subject'] = t('Upcoming Birthdays');
                $block['content'] = theme('birthdays_block', $uids, $amount, $delta);
              }
              break;
            case 'by_birthdays':
              // Get desired amount of  birthdays
              $amount = variable_get("birthdays_block_number_by_birthdays", 6);
              $uids = birthdays_get_birthdays($amount);

              if (count($uids) > 0 || variable_get('birthdays_block_hide_empty', 0) == 0) {
                // Prepare block
                $block['subject'] = t('Upcoming Birthdays');
                $block['content'] = theme('birthdays_block', $uids, $amount, $delta);
              }
              break;
          }

          return $block;
        }
    }
  }
}


/**
 * Preprocess variables to format the birthdays block.
 *
 * $variables contains the following data:
 * - $uids
 * - $amount
 * - $block_type
 */
function template_preprocess_birthdays_block(&$variables) {
  global $_birthdays_field;
  //dsm($variables);
  $variables['no_birthdays'] = TRUE;
  $variables['show_starsigns'] = (bool) variable_get('birthdays_show_starsign',BIRTHDAYS_STARSIGN_OFF);

  if (!empty($variables['uids'])) {
    $row = 0;
    $variables['no_birthdays'] = FALSE;

    foreach ($variables['uids'] as $uid) {
      $account = user_load(array('uid' => $uid));
      $birthdays[$row]['account'] = $account;
      $birthdays[$row]['username'] = theme('username', $account);

      // +1 when the birthday isn't today, because it shows the age the person will be on his/her birthday
      $account->age = ($account->age + !($account->{$_birthdays_field->name}['day'] == format_date(time(), 'custom', 'j') && $account->{$_birthdays_field->name}['month'] == format_date(time(), 'custom', 'n')));

      $birthdays[$row]['age'] = _birthdays_show_age($account);
      $birthdays[$row]['show_age'] = isset($birthdays[$row]['age']);

      $birthdays[$row]['starsign'] = birthdays_get_starsign_image($account->birthdays_starsign, variable_get('birthdays_show_starsign',BIRTHDAYS_STARSIGN_OFF));

      $account->{$_birthdays_field->name}['year'] = NULL; // Don't show the year in blocks
      $birthdays[$row]['date'] = _birthdays_show_date($account->{$_birthdays_field->name}, $account);


      $row++;
    }
    $variables['birthdays'] = $birthdays;
  }

  $variables['more'] = '<div class="more-link">'. l(t('more'), 'birthdays', array('attributes' => array('title' => t('Show all birthdays.')))) .'</div>';
}


/**
 *  Helper function for displaying only todays birthdays
 *  @return An array containing all user objects that have their birthday today
 */
function birthdays_get_todays_birthdays() {
  return birthdays_get_birthdays_by_days(1);
}


/**
 * Get all birthdays of the upcomming X days
 *
 * @var $amount
 *   Integer stating the amount of days to look forward, including today.
 * @return array
 *   An array containing user objects meeting the criteria
 */
function birthdays_get_birthdays_by_days($amount) {
  $birthdays = array();
  // Current user, needed for timezone information
  global $user;

  // $amount should be larger or equal to 1
  if ($amount < 1) {
    $amount = 1;
  }

  // Get user time zone
  // needed to determine what day 'today' is in the timezone of the user/website.
  if (variable_get('configurable_timezones', 1) && $user->uid && drupal_strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else { // else use timezone of Drupal installation
    $timezone = variable_get('date_default_timezone', 0);
  }

  // MySQL prior to 4.1.1 has no option to use UTC, while drupal uses UTC.
  // This is compensated by subtracting the machines timezone from the Drupal timezone.
  // I believe the assumption is that the HTTP-server has the same timezone as the MySQL server.
  $timezone -= date('Z');

  // Hack to look further than the end of the year, if needed.
  $current_year = date('Y');
  $next_year = $current_year + 1;

  /* Query:
    - All dates are compensated for the timezone. This makes sure that someone in Asia will see the birthdays
      of day 2 while someone in America still sees day 1.
    - Blocked users are not shown
    - Users that haven't logged in yet are also not shown (Drupal prohibits accessing their profile, thus showing
      a link to the profile is unwanted). This is a anti spammers method.
    - First part selects all birthdays that are in the next year when the interval exceeds the end of this year.
    - Second part selects all birthdays that are between the begin and end date and are in the current year
    */

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $result = db_query(
        "SELECT {dob}.uid FROM {dob}, {users} WHERE {users}.uid = {dob}.uid AND {users}.status <> 0 AND {users}.access <> 0
        AND (
        (
          DATE_FORMAT({dob}.birthday,'$next_year%%m%%d') - DATE_FORMAT(ADDDATE(ADDDATE(NOW(),INTERVAL %d SECOND),INTERVAL %d DAY),'%%Y%%m%%d') < 0
        )
        OR
        (
          DATE_FORMAT({dob}.birthday,'$current_year%%m%%d') - DATE_FORMAT(ADDDATE(NOW(),INTERVAL %d SECOND),'%%Y%%m%%d') >= 0
          AND
          DATE_FORMAT({dob}.birthday,'$current_year%%m%%d') - DATE_FORMAT(ADDDATE(ADDDATE(NOW(),INTERVAL %d SECOND),INTERVAL %d DAY),'%%Y%%m%%d') < 0
        ) )
        ORDER BY MONTH({dob}.birthday), DAYOFMONTH({dob}.birthday), YEAR({dob}.birthday), {users}.name", $timezone, $amount, $timezone, $timezone, $amount
      );
      break;
    case 'pgsql':
      $result = db_query(
        "SELECT {dob}.uid FROM {dob}, {users} WHERE {users}.uid = {dob}.uid AND {users}.status <> 0 AND {users}.access <> 0
        AND (
        (
          cast(to_char({dob}.birthday,'{$next_year}MMDD') as integer) - cast(to_char(current_timestamp + INTERVAL '%d seconds' + INTERVAL '%d days','YYYYMMDD') as integer) < 0
        )
        OR
        (
          cast(to_char({dob}.birthday,'{$current_year}MMDD') as integer) - cast(to_char(current_timestamp + INTERVAL '%d seconds','YYYYMMDD') as integer) >= 0
          AND
          cast(to_char({dob}.birthday,'{$current_year}MMDD') as integer) - cast(to_char(current_timestamp + INTERVAL '%d seconds' + INTERVAL '%d days','YYYYMMDD') as integer) < 0
        ) )
        ORDER BY date_part('month', {dob}.birthday), date_part('day', {dob}.birthday), date_part('year', {dob}.birthday), {users}.name", $timezone, $amount, $timezone, $timezone, $amount
      );
      break;
  }

  while ($account = db_fetch_object($result)) {
    $birthdays[] = $account->uid;
  }

  // Return array of uids that have their birthday
  return $birthdays;
}


/**
 * Get the next X birthdays
 *
 * @var $amount
 *   Integer stating the amount of birthdays to retrieve.
 * @return array
 *   An array containing user objects meeting the criteria
 */
function birthdays_get_birthdays($amount) {
  $birthdays = array();

  // Current logged in user
  global $user;

  // Get user time zone
  // Needed to determine what day 'today' is in the timezone of the user/website.
  if (variable_get('configurable_timezones', 1) && $user->uid && drupal_strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  }

  // $amount should be larger or equal to 1
  if ($amount < 1) {
    $amount = 1;
  }

  // MySQL prior to 4.1.1 has no option to use UTC, while drupal uses UTC.
  // This is compensated by subtracting the machines timezone from the Drupal timezone.
  // I believe the assumption is that the HTTP-server has the same timezone as the MySQL server.
  $timezone -= date('Z');

  /* Query:
    - Select all active users that have their birthday today or in the future (stops at 31-12)
    - return at most $amount users
    - Don't show blocked users
    - Users that haven't logged in yet are also not shown (Drupal prohibits accessing their profile, thus showing
      a link to the profile is unwanted). This is a anti spammers method.
  */
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $result = db_query_range(
        "SELECT {dob}.uid FROM {dob}, {users} WHERE {users}.uid = {dob}.uid AND {users}.status <> 0 AND {users}.access <> 0
        AND DATE_FORMAT({dob}.birthday,'%%c%%d') - DATE_FORMAT(ADDDATE(NOW(),INTERVAL %d SECOND),'%%c%%d') >= 0
        ORDER BY MONTH({dob}.birthday), DAYOFMONTH({dob}.birthday), YEAR({dob}.birthday), {users}.name", $timezone, 0, $amount
      );
      break;
    case 'pgsql':
      $result = db_query_range(
        "SELECT {dob}.uid FROM {dob}, {users} WHERE {users}.uid = {dob}.uid AND {users}.status <> 0 AND {users}.access <> 0
        AND cast(to_char({dob}.birthday,'FMMMDD') as integer) - cast(to_char(current_timestamp + INTERVAL '%d seconds','FMMMDD') as integer) >= 0
        ORDER BY date_part('month', {dob}.birthday), date_part('day', {dob}.birthday), date_part('year', {dob}.birthday), {users}.name", $timezone, 0, $amount
      );
      break;
  }
  $count_rows = 0;
  while ($account = db_fetch_object($result)) {
    $birthdays[] = $account->uid;
    $count_rows++;
  }

  // If less than $amount results returned, look for more after 31-12
  // return at most the difference between the number already found and
  if ($count_rows < $amount) {
    switch ($GLOBALS['db_type']) {
      case 'mysql':
      case 'mysqli':
        $result = db_query_range(
          "SELECT {dob}.uid FROM {dob}, {users} WHERE {users}.uid = {dob}.uid AND {users}.status <> 0 AND {users}.access <> 0
          AND DATE_FORMAT({dob}.birthday,'%%c%%d') - DATE_FORMAT(ADDDATE(NOW(),INTERVAL %d SECOND),'%%c%%d') < 0
          ORDER BY MONTH({dob}.birthday), DAYOFMONTH({dob}.birthday), YEAR({dob}.birthday), {users}.name", $timezone, 0, $amount - $count_rows
        );
        break;
      case 'pgsql':
        $result = db_query_range(
          "SELECT {dob}.uid FROM {dob}, {users} WHERE {users}.uid = {dob}.uid AND {users}.status <> 0 AND {users}.access <> 0
          AND cast(to_char({dob}.birthday,'FMMMDD') as integer) - cast(to_char(current_timestamp + INTERVAL '%d seconds','FMMMDD') as integer) < 0
          ORDER BY date_part('month', {dob}.birthday), date_part('day', {dob}.birthday), date_part('year', {dob}.birthday), {users}.name", $timezone, 0, $amount - $count_rows
        );
        break;
    }

    while ($account = db_fetch_object($result)) {
      $birthdays[] = $account->uid;
    }
  }

  // Return array of uids that have their birthday
  return $birthdays;
}


/**
 * Implementation of hook_user().
 */
function birthdays_user($op, &$edit, &$account, $category = NULL) {
  global $_birthdays_field;
  // Do nothing with user when _birthdays_field is not yet set
  if (!isset($_birthdays_field)) {
    return;
  }
  switch ($op) {
    case 'load':
      return birthdays_load_user($account);
    case 'update':
    case 'insert':
      return birthdays_save_user($edit, $account, $category);
    case 'form':
      return birthdays_form_user($edit, $account, $category);
    case 'register':
      return birthdays_form_user($edit, $account, $category, TRUE);
    case 'delete':
      // Delete from {dob} table, other information is handled by profile.module and user.module
      db_query('DELETE FROM {dob} WHERE uid = %d', $account->uid);
      break;
  }
}


/**
 * Inject information on a user load.
 *
 * @param object $account
 *   User object passed by reference.
 */
function birthdays_load_user(&$account) {
  global $_birthdays_field;
  // Pre-load birthday-information into $account
  profile_load_profile($account);

  // If it was set by the user
  if ($account->{$_birthdays_field->name}) {
    // Set the user's age
    $account->age = _birthdays_get_age($account->{$_birthdays_field->name});
  }
}


/**
 * Inject information and save birthday when editing or adding a user.
 */
function birthdays_save_user(&$edit, &$account, $category) {
  global $_birthdays_field;

  // Only continue when the field is present in the form results
  if (!empty($_birthdays_field->name) && array_key_exists($_birthdays_field->name, $edit)) {
    // Extract the date information
    if (is_array($edit[$_birthdays_field->name])) {
      extract($edit[$_birthdays_field->name]);
    }

    // Delete the old
    db_query("DELETE FROM {dob} where uid = %d", $account->uid);

    if ($day && $year && $month) {
      // Set the starsign for the user.module to save in the {users}.data field
      $edit['birthdays_starsign'] = _birthdays_get_starsign($day, $month);
      // Insert the new
      db_query("INSERT INTO {dob} (uid, birthday) VALUES (%d, '%d-%d-%d');", $account->uid, $year, $month, $day);
    }
    else {
      $edit['birthdays_starsign'] = '';
      unset($edit[$_birthdays_field->name]);
    }
  }
}

/**
 * Alter the way the birthday is shown. This is fired after every module has filled the profile.
 */
function birthdays_profile_alter(&$account) {
  global $_birthdays_field;
  // If the _birthdays_field hasn't been set yet, do not continue
  if (!isset($_birthdays_field)) {
    return;
  }

  // If the field existed, and is amongst the profile fields to be shown, it is save to continue
  if (isset( $_birthdays_field ) && array_key_exists($_birthdays_field->category, $account->content) && array_key_exists($_birthdays_field->name, $account->content[$_birthdays_field->category])) {

    // Do you have access to see birthdays?
    if (user_access('access birthdays')) {
      // Show starsign (will be hidden when needed)
      $starsign = '<span class="birthdays-starsign">'.
        birthdays_get_starsign_image($account->birthdays_starsign, variable_get('birthdays_show_starsign', BIRTHDAYS_STARSIGN_OFF)) .
        '</span>&nbsp;&nbsp;&nbsp;';

      // Show age (when allowed by user and administrator)
      if (variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_NO || (variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_USER && $account->birthdays_user_hide_year != BIRTHDAYS_HIDE_YEAR_USER_YES)) {
        $age = '&nbsp;&nbsp;&nbsp;<span class="birthdays-age">('. $account->age .')</span>';
      }

      // Alter the profile field setup by profile.module. Show medium format in stead of short format
      $account->content[$_birthdays_field->category][$_birthdays_field->name]['#value'] = $starsign . _birthdays_show_date($account->{$_birthdays_field->name}, $account, 'medium') . $age ;

    }
    else {
      // No access? Remove from profile to show
      unset($account->content[$_birthdays_field->category][$_birthdays_field->name]);
    }
  }
}


/**
 * Adds user options to the profile form which are saved in {users}.data and
 * are loaded during a user_load().
 * @return fields for the form
 */
function birthdays_form_user($edit, $account, $category, $register = FALSE) {
  global $_birthdays_field;
  drupal_add_css(drupal_get_path('module','birthdays') . '/birthdays.css', 'module');

  // If the called category is the category of the form field
  if ($category == $_birthdays_field->category || ($_birthdays_field->register && $register)) {
    // If the hiding of the year is a user option: show the option
    if (variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_USER) {
      $form[$_birthdays_field->category][$_birthdays_field->name]['birthdays_user_hide_year'] = array(
        '#type' => 'checkbox',
        '#title' => t("Hide age and birth year"),
        '#default_value' => (int) $account->birthdays_user_hide_year,
        '#description' => t("Do not show your age and your year of birth."),
        '#return_value' => BIRTHDAYS_HIDE_YEAR_USER_YES,
        '#weight' => 1,
        '#prefix' => '<div class="birthdays-container">',
        '#suffix' => '</div>',
      );
    }

    // If the birthday user mail is optionally, show the option
    if (variable_get('birthdays_send_user', BIRTHDAYS_USER_MAIL_NO) == BIRTHDAYS_USER_MAIL_USER) {
      $form[$_birthdays_field->category][$_birthdays_field->name]['birthdays_user_send_mail'] = array(
        '#type' => 'checkbox',
        '#title' => t("Do not send birthday mail"),
        '#default_value' => (int) $account->birthdays_user_send_mail,
        '#description' => t("Do not send me an e-mail or e-card when it's my birthday."),
        '#return_value' => BIRTHDAYS_USER_MAIL_USER_NO,
        '#weight' => 2,
        '#prefix' => '<div class="birthdays-container">',
        '#suffix' => '</div>',
      );
    }
  }

  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function birthdays_form_alter(&$form, &$form_state, $form_id) {
  global $_birthdays_field;

  if (($form_id == 'user_profile_form' && isset($form[$_birthdays_field->category])) || ($form_id == 'user_register' && $_birthdays_field->register)) {
    $form[$_birthdays_field->category][$_birthdays_field->name]['#process'] = array('expand_birthdays_date');
    $form[$_birthdays_field->category][$_birthdays_field->name]['#element_validate'] = array('birthdays_date_validate');
  }
}

/**
 * Process the birthday field (based on a regular date element) to
 * limit it to past birthdays and make it the entire element optional
 * by adding empty options for days, months and years.
 */
function expand_birthdays_date($element) {
  if (empty($element['#value'])) {
    $element['#value'] = array('day' => '', 'month' => '', 'year' => '');
  }

  $element = expand_date($element);
  $element['month']['#options'] = array('' => '--') + $element['month']['#options'];
  $element['day']['#options'] = array('' => '--') + $element['day']['#options'];
  $element['year']['#options'] = array('' => '--') + drupal_map_assoc(range(date('Y'), 1900));

  return $element;
}

/**
 * Validate the birthday field.
 */
function birthdays_date_validate($element) {
  extract($element['#value']);
  if (empty($month) || empty($year) || empty($day)) {
    if ($element['#required']) {
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
    elseif (!(empty($month) && empty($year) && empty($day))) {
      form_error($element, t('The specified date is invalid.'));
    }
  }
  elseif (!checkdate($month, $day, $year)) {
      form_error($element, t('The specified date is invalid.'));
  }
}

/**
 * Get starsign based on date of birth
 *
 * @var $day and $month, decribing date of birth
 * @return The name of the starsign
 */
function _birthdays_get_starsign($day, $month) {

  switch ($month) {
    case 1:
      $starsign = $day < 20 ? 'capricorn' : 'aquarius';
      break;
    case 2:
      $starsign = $day < 19 ? 'aquarius' : 'pisces';
      break;
    case 3:
      $starsign = $day < 21 ? 'pisces' : 'aries';
      break;
    case 4:
      $starsign = $day < 20 ? 'aries' : 'taurus';
      break;
    case 5:
      $starsign = $day < 21 ? 'taurus' : 'gemini';
      break;
    case 6:
      $starsign = $day < 22 ? 'gemini' : 'cancer';
      break;
    case 7:
      $starsign = $day < 23 ? 'cancer' : 'leo';
      break;
    case 8:
      $starsign = $day < 23 ? 'leo' : 'virgo';
      break;
    case 9:
      $starsign = $day < 23 ? 'virgo' : 'libra';
      break;
    case 10:
      $starsign = $day < 23 ? 'libra' : 'scorpio';
      break;
    case 11:
      $starsign = $day < 23 ? 'scorpio' : 'sagittarius';
      break;
    case 12:
      $starsign = $day < 22 ? 'sagittarius' : 'capricorn';
      break;
  }

  return $starsign;
}


/**
 * Retrieve all fields of type 'date' from the profile.module's tables
 * @return array with fieldnames
 */
function _birthdays_get_date_fields() {
  $options = array();
  $result = db_query("SELECT fid, name FROM {profile_fields} WHERE type = 'date'");

  while ($field = db_fetch_object($result)) {
    $options[$field->fid] = $field->name;
  }

  return $options;
}


/**
 * Retrieve profile field object
 *
 * @var string $fid
 *   Id of field to retrieve
 * @return object
 *   profile field object
 */
function _birthdays_get_field($fid) {
  if (isset($fid)) {
    $field = db_fetch_object(db_query("SELECT * FROM {profile_fields} WHERE fid = %d", $fid));
    return empty($field) ? NULL : $field;
  }
  else {
    return NULL;
  }
}


/**
 * Return the picture of a starsign, given the name. Links to Yahoo! when option is selected.
 *
 * @param string starsign
 *   name of the starsign to show (not translated)
 * @param int $show
 *   Show starsigns for values > 0
 * @return string
 *   HTML of a picture link to Yahoo horoscopes
 */
function birthdays_get_starsign_image($starsign, $show = BIRTHDAYS_STARSIGN_OFF) {
  $output = '';

  // Only show starsign when enabled
  if ($show > BIRTHDAYS_STARSIGN_OFF && !empty($starsign)) {
    // Image based on thme path.
    $output = '<img src="'. base_path() . drupal_get_path('module', 'birthdays') .'/starsigns/'. $starsign .'.gif" alt="'. t($starsign) .'" />';

    // If link should be shown: update $output
    if ($show == BIRTHDAYS_STARSIGN_LINK) {
      $output = '<a href="http://astrology.yahoo.com/astrology/general/dailyoverview/'. $starsign .'" target="_blank" title="'. t($starsign) .'">'. $output .'</a>';
    }
  }

  // Return HTML
  return $output;
}

/**
 * Get age from a given date of birth
 *
 * @var array $date
 *   array containing fields with keys 'year', 'month' and 'day'
 * @return int
 *   age
 */
function _birthdays_get_age($date) {
  // If date is not empty
  if (is_array($date)) {
    // extract date
    extract($date);

    // call main age function (no overloading in PHP)
    return _birthdays_calculate_age($day, $month, $year);
  }
  else {
    return NULL;
  }
}


/**
 * Calculate age
 *
 * @var $year, $month, $day as expected
 * @return int
 *   age
 */
function _birthdays_calculate_age($day, $month, $year) {
  if ($year && $month && $day) {
    // age = (current year - birthyear) - 1 (when the birthday hasn't arrived yet).
    return format_date(time(), 'custom', 'Y') - $year - (format_date(time(), 'custom', 'nd') < $month . str_pad($day, 2, 0, STR_PAD_LEFT));
  }
  else {
    return NULL;
  }
}


/**
 * Return age if user has agreed to show it
 *
 * @param object $account
 *   a user object having attribute "age" set
 * @return int
 */
function _birthdays_show_age($account) {
  $age = NULL;
  if (isset($account->age) && (variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_NO || (variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_USER && $account->birthdays_user_hide_year != BIRTHDAYS_HIDE_YEAR_USER_YES))) {
    $age = $account->age;
  }
  return $age;
}


/**
 * Format date array
 */
function _birthdays_show_date($date, $account, $format = 'small') {
  if (is_array($date)) {
    // Extract date
    extract($date);

    // Call main format function
    return _birthdays_show_date_2($day, $month, $year, $account, $format);
  }
  else {
    return NULL;
  }
}

/**
 * Format date, optionally hide year
 */
function _birthdays_show_date_2($day, $month, $year, $account, $type = 'small') {
  $output = '';
  // Determine format type
  switch ($type) {
    case 'medium':
      $format = variable_get('date_format_medium', 'D, m/d/Y - H:i');
      break;
    case 'small':
    default:
      $format = variable_get('date_format_short', 'm/d/Y - H:i');
  }

  // remove time from (- H:i)
  //$format = substr($format, 0, -6);

  // If admin or user decide to hide the age&year: hide year
  if ($year && ( variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_YES || (variable_get('birthdays_hide_year', BIRTHDAYS_HIDE_YEAR_NO) == BIRTHDAYS_HIDE_YEAR_USER && $account->birthdays_user_hide_year == BIRTHDAYS_HIDE_YEAR_YES))) {
    $year = NULL;
  }

  // Replacement array (can't use date() because of 1970 limitations in e.g. Windows PHP4)
  $replace = array(
    'd' => sprintf('%02d', $day),
    'D' => NULL,
    'j' => $day,
    'm' => sprintf('%02d', $month),
    'M' => map_month($month),
    'Y' => $year,
    'H:i' => NULL,
    'G:i' => NULL,
    'g:ia' => NULL,
    'F' => t(gmdate('F', mktime(0, 0, 0, $month, 15, 2000))),
  );

  // Translate string to correct format
  $output .= strtr($format, $replace);
  $output = trim($output, '/ ,.:-');

  return $output;
}

/**
 * Check which e-mail strings should be retreived, and fill in the default
 * placeholders. Uses the same method as _user_mail_text().
 */
function _birthdays_mail_text($key, $language = NULL, $variables = array()) {
  $langcode = isset($language) ? $language->language : NULL;

  // If the text is not the default, run it through strtr() to fill in the
  // placeholders.
  if ($text = variable_get('birthdays_send_user_' . $key, FALSE)) {
    return strtr($text, $variables);
  }
  else {
    // Which text do we want to retreive?
    switch ($key) {
      case 'subject':
        return t('Happy Birthday, !username!', $variables, $langcode);
      case 'message':
        return t("Hey !username,\n\nHappy birthday!\nWe hope you have a great day\n\nThe !site-team\n!uri_brief", $variables, $langcode);
    }
  }
}
